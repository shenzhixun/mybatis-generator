<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!--导入属性配置-->
    <properties resource="datasource.properties"></properties>

    <!-- 指定数据库驱动的jdbc驱动jar包的位置 -->
    <classPathEntry location="${db.driverLocation}" />

    <!-- context 是逆向工程的主要配置信息 -->
    <!-- id：起个名字 -->
    <!-- targetRuntime：设置生成的文件适用于那个 mybatis 版本 -->
    <context id="default" targetRuntime="MyBatis3">

        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!-- 自定义插件 -->
        <plugin type="org.mybatis.plugins.MyAdaptPlugin" >
            <property name="hasLombok" value="true"/>
            <property name="targetPackage" value="${targetPackageBase}.mapper"/>
        </plugin>

        <!--<commentGenerator type="org.mybatis.plugins.MyCommentGenerator">
        </commentGenerator>-->


        <!--optional,旨在创建class时，对注释进行控制-->
        <commentGenerator  type="org.mybatis.plugins.MyCommentGenerator">
            <property name="suppressDate" value="true" />
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="false" />
        </commentGenerator>

        <!--jdbc的数据库连接-->
        <jdbcConnection driverClass="${db.driverClassName}"
                        connectionURL="${db.url}"
                        userId="${db.username}"
                        password="${db.password}">
        </jdbcConnection>


        <!-- java类型处理器
            用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
            注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
        -->
        <!-- 不是 double 和 long 类型 -->
        <javaTypeResolver>
            <!--
                true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                false：默认,
                    scale>0;length>18：使用BigDecimal;
                    scale=0;length[10,18]：使用Long；
                    scale=0;length[5,9]：使用Integer；
                    scale=0;length<5：使用Short；
             -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>




        <!-- java模型创建器，是必须要的元素
            负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
            targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
            targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
         -->
        <!-- targetPackage：生成的实体类所在的包 -->
        <!-- targetProject：生成的实体类所在的硬盘位置 -->
        <javaModelGenerator targetPackage="${targetPackageBase}.model"   targetProject="${targetProjectBase}">
            <!-- 是否允许子包 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true" />
            <!-- 是否对model添加构造函数 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field； -->
            <property name="constructorBased" value="false" />
            <!-- 是否清理从数据库中查询出的字符串左右两边的空白字符 -->
            <!--<property name="trimStrings" value="true" />-->
            <!-- 建立modal对象是否不可改变 即生成的model对象不会有setter方法，只有构造方法 -->
            <property name="immutable" value="false" />
            <!-- 设置一个根对象，
               如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项
               注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：
                   1，属性名相同，类型相同，有相同的getter/setter方法；-->
            <property name="rootClass" value="com.ejet.comm.base.CoBaseVO"/>

        </javaModelGenerator>



        <!-- 生成mapper XML文件
                注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
                    或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
                targetPackage/targetProject:同javaModelGenerator
             -->
        <sqlMapGenerator targetPackage="${targetPackageXML}" targetProject="src/main/resources">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>

        <!-- 生成DAO的包名和位置
                       对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
                    targetPackage/targetProject:同javaModelGenerator
                    type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
                    1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
                    2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
                    3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
                注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
                -->
        <javaClientGenerator type="XMLMAPPER"
                             targetPackage="${targetPackageBase}.mapper" targetProject="${targetProjectBase}">
            <!-- 针对 oracle 数据库的一个配置，是否把 schema 作为字包名 -->
            <property name="enableSubPackages" value="true"/>
            <property name="rootInterface" value="com.ejet.comm.base.CoBaseMapper"/>
        </javaClientGenerator>


        <table tableName="pix_empi" domainObjectName="PixEmpiModel"
               enableInsert="true"
               enableUpdateByExample="false" enableUpdateByPrimaryKey="true"
               enableDeleteByPrimaryKey="true" enableDeleteByExample="false"
               enableCountByExample="false" enableSelectByExample="true" selectByPrimaryKeyQueryId="true" selectByExampleQueryId="false"
        >
            <!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate -->
            <property name="useActualColumnNames" value="false"/>
            <property name="ignoreQualifiersAtRuntime" value="true" />
            <property name="insertBatch" value="true"/>
            <generatedKey column="id" sqlStatement="MySql" identity="true" />
            <!--
            该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，
            比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；
            那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是
            custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；
            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，
            如果使用了columnOverride元素，该属性无效；-->
            <!--
            <columnRenamingRule searchString="" replaceString=""/>
            -->
            <!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现
             column:指定要忽略的列的名字；
             delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false

             注意，一个table元素中可以有多个ignoreColumn元素
            <ignoreColumn column="deptId" delimitedColumnName=""/>
            -->


        </table>


    </context>


</generatorConfiguration>